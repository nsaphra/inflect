#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Outputs a fully inflected version of a lemmatized test set (provided on STDIN). 
If training data is provided, it will use a unigram model to select the form.

usage: cat LEMMA_FILE | python inflect
       [-t TRAINING_PREFIX] [-l LEMMA_SUFFIX] [-w WORD_SUFFIX]
"""

<<<<<<< Updated upstream
weights = {'unigram_lemma':1, 'bigram_lemma':100} 
=======
weights = {'unigram_lemma':1, 'bigram_lemma':100, 'trigram_lemma':1000} 
>>>>>>> Stashed changes

import argparse
import codecs
import sys
import os
from collections import defaultdict
from itertools import izip

PARSER = argparse.ArgumentParser(description="Inflect a lemmatized corpus")
PARSER.add_argument("-t", type=str, default="data/train", help="training data prefix")
PARSER.add_argument("-l", type=str, default="lemma", help="lemma file suffix")
PARSER.add_argument("-w", type=str, default="form", help="word file suffix")
args = PARSER.parse_args()

# Python sucks at UTF-8
sys.stdout = codecs.getwriter('utf-8')(sys.stdout) 
sys.stdin = codecs.getreader('utf-8')(sys.stdin) 

# Build a model on the training data
LEMMATA = defaultdict(defaultdict)

def get_feats(ind, lemmata):
    f = {}
    f['unigram_lemma'] = lemmata[ind]
    f['bigram_lemma'] = ('<s> ' + lemmata[ind]) if ind == 0 else lemmata[ind-1] + ' ' + lemmata[ind]
    return f

def train_example(words, lemmata):
    for (it, (word, lemma)) in enumerate(izip(words, lemmata)):
        for (k,v) in get_feats(it, lemmata).items():
            LEMMATA[v][word] = LEMMATA[v].get(word, 0.0) + 1.0

def inflection_likelihood(ind, lemmata, word):
    return sum([LEMMATA[v].get(word, 0.0) * weights[k] for (k,v) in get_feats(ind, lemmata).items()])

def best_inflection(ind, lemmata):
    lemma = lemmata[ind]
    if LEMMATA.has_key(lemma) and len(LEMMATA[lemma]) != 0:
        return sorted(LEMMATA[lemma].keys(),
            key=lambda x : inflection_likelihood(ind, lemmata, x))[-1]
    return lemma

def inflect_line(lemmata):
    ret = [lemma for lemma in lemmata]
    for (it, lemma) in enumerate(lemmata):
        ret[it] = best_inflection(it, lemmata)
    return ret

if args.t:
    def combine(a, b): return '%s.%s' % (a, b)
    def utf8read(file): return codecs.open(file, 'r', 'utf-8')
    for words, lemmas in izip(utf8read(combine(args.t, args.w)), utf8read(combine(args.t, args.l))):
       train_example(words.rstrip().split(), lemmas.rstrip().split())

# Inflect STDIN
for line in sys.stdin:
    print ' '.join(inflect_line(line.rstrip().split()))
